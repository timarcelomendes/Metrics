# pages/8_üîó_Conex√µes_Jira.py

import streamlit as st
from security import *
from jira_connector import connect_to_jira, validate_jira_connection
import uuid
import time
from pathlib import Path

st.set_page_config(page_title="Conex√µes Jira", page_icon="üîó", layout="wide")

st.header("üîó Gerir Conex√µes Jira", divider='rainbow')

# --- BLOCO 1: ALERTA GLOBAL DE CONEX√ÉO INV√ÅLIDA ---
# Verifica se o utilizador foi redirecionado para esta p√°gina devido a uma conex√£o inv√°lida
if 'invalid_connection_id' in st.session_state and st.session_state.invalid_connection_id:
    st.error(
        "A sua conex√£o Jira que estava ativa √© inv√°lida, expirou ou n√£o tem as permiss√µes necess√°rias. "
        "Por favor, edite-a com um novo token de API, ative outra conex√£o ou crie uma nova.",
        icon="üíî"
    )

# --- Verifica√ß√µes de Seguran√ßa ---
if 'email' not in st.session_state:
    st.warning("‚ö†Ô∏è Por favor, fa√ßa login para acessar."); st.page_link("1_üîë_Autentica√ß√£o.py", label="Ir para Autentica√ß√£o", icon="üîë"); st.stop()

if check_session_timeout():
    st.warning(f"Sua sess√£o expirou por inatividade de {SESSION_TIMEOUT_MINUTES} minutos. Por favor, fa√ßa login novamente.")
    st.page_link("1_üîë_Autentica√ß√£o.py", label="Ir para Autentica√ß√£o", icon="üîë")
    st.stop()
    
with st.sidebar:
    project_root = Path(__file__).parent.parent
    logo_path = project_root / "images" / "gauge-logo.svg"
    try:
        st.logo(str(logo_path), size="large")
    except (FileNotFoundError, AttributeError):
        st.write("Gauge Metrics") 

    if st.session_state.get("email"):
        st.markdown(f"üîê Logado como: **{st.session_state['email']}**")
    else:
        st.info("‚ö†Ô∏è Usu√°rio n√£o conectado!")

    if st.button("Logout", width='stretch', type='secondary'):
        for key in list(st.session_state.keys()): del st.session_state[key]
        st.switch_page("1_üîë_Autentica√ß√£o.py")
        
user_data = find_user(st.session_state['email'])
connections = user_data.get('jira_connections', [])
active_connection_id = user_data.get('active_jira_connection')

# --- Adicionar Nova Conex√£o ---
st.subheader("Adicionar Nova Conex√£o")
with st.form("new_connection_form"):
    st.text_input("Nome da Conex√£o*", placeholder="Ex: Jira da Empresa X", key="new_conn_name")
    st.text_input("URL do Jira*", placeholder="https://sua-empresa.atlassian.net", key="new_conn_url")
    st.text_input("E-mail do Jira*", placeholder="seu-email@empresa.com", key="new_conn_email")
    st.text_input("Token de API*", type="password", help="O seu token de API, n√£o a sua senha.", key="new_conn_token")
    
    if st.form_submit_button("Testar e Salvar Conex√£o", type="primary"):
        name = st.session_state.new_conn_name
        url = st.session_state.new_conn_url
        email = st.session_state.new_conn_email
        token = st.session_state.new_conn_token

        if all([name, url, email, token]):
            with st.spinner("A testar a conex√£o..."):
                client = connect_to_jira(url, email, token)
                if client and validate_jira_connection(client):
                    new_conn = {
                        "id": str(uuid.uuid4()), "name": name, "jira_url": url,
                        "jira_email": email, "encrypted_token": encrypt_token(token)
                    }
                    connections.append(new_conn)
                    save_user_connections(st.session_state['email'], connections)
                    st.success(f"Conex√£o '{name}' salva e validada com sucesso!")
                    time.sleep(1); st.rerun()
                else:
                    st.error("Falha na conex√£o. Verifique se a URL, o e-mail e o token de API est√£o corretos.")
        else:
            st.warning("Por favor, preencha todos os campos.")

st.divider()

# --- Listar Conex√µes Existentes ---
st.subheader("Conex√µes Guardadas")
if not connections:
    st.info("Nenhuma conex√£o Jira foi guardada ainda.")
else:
    for i, conn in enumerate(connections):
        conn_id = conn['id']
        is_active = (conn_id == active_connection_id)
        # --- BLOCO 2: VERIFICA SE A CONEX√ÉO ATUAL √â A INV√ÅLIDA ---
        is_invalid = (conn_id == st.session_state.get('invalid_connection_id'))

        # Constr√≥i o r√≥tulo do expander dinamicamente para incluir os √≠cones
        label = conn['name']
        if is_invalid:
            label = f"‚ö†Ô∏è {label} (Inv√°lida / Requer Aten√ß√£o)"
        elif is_active:
            label = f"üü¢ {label} (Ativa)"

        with st.expander(label):
            with st.form(f"form_{conn_id}"):
                st.text_input("Nome da Conex√£o", value=conn['name'], key=f"name_{conn_id}")
                st.text_input("URL do Jira", value=conn['jira_url'], key=f"url_{conn_id}")
                st.text_input("E-mail do Jira", value=conn['jira_email'], key=f"email_{conn_id}")
                st.text_input("Novo Token de API (Opcional)", type="password", help="Preencha apenas se quiser atualizar o token.", key=f"token_{conn_id}")

                c1, c2, c3 = st.columns([2, 1, 1])
                with c1:
                    if st.form_submit_button("Ativar Conex√£o", type="primary", disabled=is_active):
                        save_last_active_connection(st.session_state['email'], conn_id)

                        if 'invalid_connection_id' in st.session_state:
                            del st.session_state['invalid_connection_id']
                        st.success(f"Conex√£o '{conn['name']}' ativada. A aplica√ß√£o ir√° reiniciar.")
                        time.sleep(2)
                        st.switch_page("1_üîë_Autentica√ß√£o.py")
                with c2:
                    if st.form_submit_button("Salvar Altera√ß√µes"):
                        connections[i]['name'] = st.session_state[f"name_{conn_id}"]
                        connections[i]['jira_url'] = st.session_state[f"url_{conn_id}"]
                        connections[i]['jira_email'] = st.session_state[f"email_{conn_id}"]
                        new_token = st.session_state[f"token_{conn_id}"]
                        if new_token:
                            connections[i]['encrypted_token'] = encrypt_token(new_token)
                        save_user_connections(st.session_state['email'], connections)
                        st.success("Altera√ß√µes salvas!")
                        time.sleep(1); st.rerun()
                with c3:
                    if st.form_submit_button("Apagar"):
                        delete_jira_connection(conn_id)

                        if st.session_state.get('invalid_connection_id') == conn_id:
                            del st.session_state['invalid_connection_id']
                        st.success("Conex√£o apagada!")
                        time.sleep(1); st.rerun()