# pages/15_‚ùì_Ajuda_e_Sobre.py
import streamlit as st
from pathlib import Path
import re
from utils import get_ai_page_summary_and_faq, save_help_topic, load_help_topics
from datetime import datetime

st.set_page_config(page_title="Ajuda & Sobre", page_icon="‚ùì", layout="wide")

st.header("‚ùì Ajuda e Sobre a Aplica√ß√£o", divider='rainbow')
st.markdown("""
Esta sec√ß√£o utiliza Intelig√™ncia Artificial para analisar o c√≥digo de cada p√°gina da aplica√ß√£o e gerar uma documenta√ß√£o e um FAQ contextualizados.
A documenta√ß√£o √© guardada ap√≥s a primeira gera√ß√£o e fica dispon√≠vel para todos os utilizadores.
""")

# --- L√≥gica para encontrar as p√°ginas da aplica√ß√£o ---
def get_app_pages():
    pages = {}
    app_root = Path(__file__).parent.parent

    # Adiciona a p√°gina principal
    main_page_path = app_root / "1_üîë_Autentica√ß√£o.py"
    if main_page_path.exists():
        pages["1_üîë_Autentica√ß√£o"] = main_page_path

    # Adiciona as p√°ginas da pasta 'pages'
    pages_dir = app_root / "pages"
    if pages_dir.exists():
        for f in sorted(pages_dir.glob("*.py")):
            # Extrai um nome mais limpo do ficheiro
            clean_name = re.sub(r'^\d+_\S*?_', '', f.stem)
            pages[clean_name] = f

    return pages

app_pages = get_app_pages()
page_names = list(app_pages.keys())

# --- Interface do Utilizador ---
selected_page_name = st.selectbox(
    "**Selecione a p√°gina para a qual deseja ver ou gerar a documenta√ß√£o:**",
    options=page_names,
    index=0
)

st.markdown("---")

if selected_page_name:
    page_path = app_pages[selected_page_name]
    topic_key = page_path.stem # Usa o nome do ficheiro como chave √∫nica

    # Carrega a documenta√ß√£o existente
    all_docs = load_help_topics()
    existing_doc = all_docs.get(topic_key)

    col1, col2 = st.columns([3, 1])

    with col1:
        st.subheader(f"Documenta√ß√£o para: `{selected_page_name}`")
        if existing_doc:
            last_updated = datetime.fromisoformat(existing_doc['last_updated']).strftime('%d/%m/%Y √†s %H:%M')
            st.caption(f"√öltima atualiza√ß√£o: {last_updated}")

    with col2:
        if st.button("üîÑ Gerar ou Atualizar Ajuda com IA", use_container_width=True, type="primary"):
            existing_doc = None # For√ßa a re-gera√ß√£o

    if not existing_doc:
        with st.spinner(f"A Gauge AI est√° a ler o c√≥digo da p√°gina '{selected_page_name}'..."):
            try:
                # L√™ apenas o conte√∫do da p√°gina selecionada
                page_content = page_path.read_text(encoding='utf-8')

                # Chama a IA e guarda o resultado
                ai_content = get_ai_page_summary_and_faq(selected_page_name, page_content)
                save_help_topic(topic_key, ai_content)
                st.session_state[f'doc_{topic_key}'] = ai_content
                st.rerun()

            except Exception as e:
                st.error(f"Ocorreu um erro inesperado: {e}")

    # Exibe a documenta√ß√£o (seja a rec√©m-gerada ou a j√° existente)
    doc_to_display = existing_doc['content'] if existing_doc else None

    if doc_to_display:
        st.markdown(doc_to_display, unsafe_allow_html=True)
    else:
        st.info("Clique no bot√£o 'Gerar ou Atualizar Ajuda com IA' para criar a documenta√ß√£o para esta p√°gina.")